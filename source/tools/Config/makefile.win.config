###### Common definitions ######

# In this section we place all the generic flags. Later sections provide
# additional flags depending on architecutre, compiler etc.

## General flags

# If we are testing Pin, add some internal checks. Don't do this by default
# since it may incur a performance penatly.
PIN_TESTFLAGS :=
ifeq ($(PIN_TESTING),1)
    PIN_TESTFLAGS += -slow_asserts
endif

## Output control

COMP_OBJ := /c /Fo
COMP_EXE := /Fe
LINK_EXE := /out:

## Special compilation directives

STATIC :=
NO_RANDOM := /DYNAMICBASE:NO
PIC :=
NO_PIE :=
SSE2 :=
ASMCPP :=

## Include paths

# COMPONENT_INCLUDES will be defined later in the directory structure section.
# APP_INCLUDES and TOOL_INCLUDES are internal utilities for this file.
APP_INCLUDES :=
TOOL_INCLUDES :=

## Library paths

APP_LPATHS :=
TOOL_LPATHS :=
SATOOL_LPATHS :=

## Libraries to link
APP_LIBS :=
DL_LIB :=
APP_LIB_ATOMIC := atomic.lib
APP_LIB_XED := libxed.lib
TOOL_LIBS := pin.lib libxed.lib libcpmt.lib libcmt.lib pinvm.lib kernel32.lib ntdll-$(BITS).lib
SATOOL_LIBS :=

## Compiler flags

# Throughout this file, we only fill in the NOOPT versions of these variables.
# At the bottom of the file, the full versions are built from the NOOPT and
# the relevant optimization and debug flags (see below).
# e.g. APP_CXXFLAGS := $(APP_CXXFLAGS_NOOPT) $(APP_OPT_CXX) $(DBG_INFO_CXX)

APP_CXXFLAGS_NOOPT := /nologo /DTARGET_WINDOWS /DFUND_TC_HOSTOS=FUND_OS_WINDOWS \
                      /DFUND_TC_TARGETOS=FUND_OS_WINDOWS /MD /EHa /Gy-
ASM_FLAGS := /nologo

# /MT			Link to static CRT library. Using CRT DLL could cause conflict with the
#				application using the same DLL.
# /EHs- /EHa-	Disable exception handling in the tool, otherwise it could interfere in
#				the apllication's exception handling.
# /wd4530		Turn off the warning about not having /EHsc turned on, while using STL.
TOOL_CXXFLAGS_NOOPT := /MT /EHs- /EHa- /wd4530 /DTARGET_WINDOWS /DBIGARRAY_MULTIPLIER=1 \
                       /DUSING_XED /D_CRT_SECURE_NO_DEPRECATE /D_SECURE_SCL=0 /nologo /Gy
DLL_CXXFLAGS :=
ENABLE_DEPRECATED := /DPIN_DEPRECATED_WARNINGS=0

## Linker flags

# Throughout this file, we only fill in the NOOPT versions of these variables.
# At the bottom of the file, the full versions are built from the NOOPT and
# the relevant optimization and debug flags (see below).
# e.g. TOOL_LDFLAGS := $(TOOL_LDFLAGS_NOOPT) $(TOOL_OPT_LD) $(DBG_INFO_LD)

APP_LDFLAGS_NOOPT := /link /NOLOGO /INCREMENTAL:NO
# /EXPORT:main	Main function of the tool has to be exported.
# /NODEFAULTLIB	Do not link and use any system library except for those listed explicitly
#				to avoid conflicts with an application using the same library.
TOOL_LDFLAGS_NOOPT := /DLL /EXPORT:main /NODEFAULTLIB /NOLOGO /INCREMENTAL:NO
SATOOL_LDFLAGS :=
SATOOL_LDFLAGS_NOOPT :=
DLL_LDFLAGS := /DLL

###### Debugging and optimizations ######

## Utility variables "internal" to this file

# The following variables depend on the user-defined DEBUG variable.
# If DEBUG=1 was specified, no optimizations will be applied and debug
# information will be generated. Otherwise, full optimization will be
# performed and debug information will not be generated.

ifeq ($(DEBUG),1)
    APP_OPT_CXX := /Od
    APP_OPT_LD :=
    TOOL_OPT_CXX := /Od
    TOOL_OPT_LD :=
    DBG_INFO_CXX := /Zi
    DBG_INFO_LD := /DEBUG
else
    APP_OPT_CXX := /O2
    APP_OPT_LD := /OPT:REF
    TOOL_OPT_CXX := /O2
    TOOL_OPT_LD := /OPT:REF
    DBG_INFO_CXX :=
    DBG_INFO_LD :=
endif

## Debugging flags to be used in any makefile.rules file

# The following variables do not depend on the user-defined DEBUG
# variable. When they are used, debug information will always be
# generated.

# This doesn't work because automatic testing goes through a cygwin
# ssh.  There is a cygwin bug that prevents the compiler from creating
# PDB files.  See this note:
#
#   http://cygwin.com/ml/cygwin/2008-08/msg00157.html
#
# DBG_INFO_CXX_ALWAYS := /Zi
# DBG_INFO_LD_ALWAYS := /DEBUG

###### Additional flags depending on directory structure ######

ifeq ($(KIT),1)
    # In the kit tree, the Pin root is the kit root.
    PIN_ROOT := ../../..
    XED_ROOT := $(PIN_ROOT)/extras/xed2-$(TARGET)
    TOOLS_ROOT := $(PIN_ROOT)/source/tools
    
    COMPONENT_INCLUDES := /I$(PIN_ROOT)/extras/components/include
    TOOL_INCLUDES += /I$(PIN_ROOT)/source/include/pin \
                     /I$(PIN_ROOT)/source/include/pin/gen

    APP_LPATHS += /LIBPATH:$(PIN_ROOT)/extras/components/lib/$(TARGET)
    TOOL_LPATHS += /LIBPATH:$(PIN_ROOT)/$(TARGET)/lib \
                   /LIBPATH:$(PIN_ROOT)/$(TARGET)/lib-ext
    SATOOL_LPATHS += /LIBPATH:$(PIN_ROOT)/$(TARGET)/lib \
                     /LIBPATH:$(PIN_ROOT)/$(TARGET)/lib-ext

    PIN := $(PIN_ROOT)/pin
    PINBIN := $(PIN_ROOT)/$(TARGET)/bin/pin$(EXE_SUFFIX)
    PIN32 := $(PIN_ROOT)/ia32/bin/pin$(EXE_SUFFIX)
    PIN64 := $(PIN_ROOT)/intel64/bin/pin$(EXE_SUFFIX)
else
    # In the source tree, the Pin root is the Charm directory.
    PIN_ROOT := ../..
    XED_ROOT := $(PIN_ROOT)/build/Source/xed/xed-$(COMPILER)-pin-$(TARGET_OS)-$(TARGET)/xed2-kit
    TOOLS_ROOT := $(PIN_ROOT)/PinTools

	COMPONENT_INCLUDES := /I$(PIN_ROOT)/Source/atomic/00-export-include \
                          /I$(PIN_ROOT)/Source/fund/00-export-include \
                          /I$(PIN_ROOT)/Source/sync/00-export-include \
                          /I$(PIN_ROOT)/Source/util/00-export-include
    TOOL_INCLUDES += /I$(TOOLS_ROOT)/Include \
                     /I$(PIN_ROOT)/build/Source/pin/internal-include-$(TARGET_OS)-$(TARGET)

    APP_LPATHS += /LIBPATH:$(PIN_ROOT)/build/Source/pin/internal-include-$(TARGET_OS)-$(TARGET)/lib
    TOOL_LPATHS += /LIBPATH:$(PIN_ROOT)/build/Source/pin/pin-$(TARGET_OS)-$(TARGET) \
                   /LIBPATH:$(PIN_ROOT)/External/Ntdll/Lib_$(TARGET)_$(TARGET_OS)
    SATOOL_LPATHS += /LIBPATH:$(PIN_ROOT)/build/Source/pin/pin-$(TARGET_OS)-$(TARGET) \
                     /LIBPATH:$(PIN_ROOT)/External/Ntdll/Lib_$(TARGET)_$(TARGET_OS)

    PIN := $(PIN_ROOT)/build/Source/pin/pin-$(TARGET_OS)-$(TARGET)/pin$(EXE_SUFFIX)
    PINBIN := $(PIN_ROOT)/build/Source/pin/pin-$(TARGET_OS)-$(TARGET)/pin$(EXE_SUFFIX)
	PIN32 := $(PIN_ROOT)/build/Source/pin/pin-$(TARGET_OS)-ia32/pin$(EXE_SUFFIX)
	PIN64 := $(PIN_ROOT)/build/Source/pin/pin-$(TARGET_OS)-intel64/pin$(EXE_SUFFIX)
endif

TOOL_INCLUDES += $(COMPONENT_INCLUDES) \
                 /I$(XED_ROOT)/include \
                 /I$(TOOLS_ROOT)/InstLib
APP_LPATHS += /LIBPATH:$(XED_ROOT)/lib
TOOL_LPATHS += /LIBPATH:$(XED_ROOT)/lib
SATOOL_LPATHS += /LIBPATH:$(XED_ROOT)/lib

###### Additional flags depending on the compiler ######

ifeq ($(ICC),1)
    CC := icl
    CXX := icl
    LINKER = xilink
    TOOL_LIBS += libirc.lib
    ifneq ($(CCOV),)
        TOOL_LIBS += libmmt.lib libipgo.lib libirc.lib svml_disp.lib
    endif
endif

###### Additional flags depending on architecture ######

ifeq ($(TARGET),ia32)
    APP_CXXFLAGS_NOOPT += /DTARGET_IA32 /DHOST_IA32 /DFUND_TC_TARGETCPU=FUND_CPU_IA32 /DFUND_TC_HOSTCPU=FUND_CPU_IA32
    TOOL_CXXFLAGS_NOOPT += /DTARGET_IA32 /DHOST_IA32
    TOOL_LDFLAGS_NOOPT += /MACHINE:x86 /ENTRY:Ptrace_DllMainCRTStartup@12 /BASE:0x55000000
    SSE2 := /arch:SSE2
endif

ifeq ($(TARGET),intel64)
    APP_CXXFLAGS_NOOPT += /DTARGET_IA32E /DHOST_IA32E /DFUND_TC_TARGETCPU=FUND_CPU_INTEL64 /DFUND_TC_HOSTCPU=FUND_CPU_INTEL64
    TOOL_CXXFLAGS_NOOPT += /DTARGET_IA32E /DHOST_IA32E
    TOOL_LDFLAGS_NOOPT += /MACHINE:x64 /ENTRY:Ptrace_DllMainCRTStartup /BASE:0xC5000000
endif

###### Finalize flags ######

## Compiler and linker flags

# Add the include paths to the compilation flags.
APP_CXXFLAGS_NOOPT += $(APP_INCLUDES)
TOOL_CXXFLAGS_NOOPT += $(TOOL_INCLUDES)

# Define the versions containing the full options
APP_CXXFLAGS := $(APP_CXXFLAGS_NOOPT) $(APP_OPT_CXX) $(DBG_INFO_CXX)
APP_LDFLAGS := $(APP_LDFLAGS_NOOPT) $(APP_OPT_LD) $(DBG_INFO_LD)
TOOL_CXXFLAGS := $(TOOL_CXXFLAGS_NOOPT) $(TOOL_OPT_CXX) $(DBG_INFO_CXX)
TOOL_LDFLAGS := $(TOOL_LDFLAGS_NOOPT) $(TOOL_OPT_LD) $(DBG_INFO_LD)

# Add debugging flags to the NOOPT versions and disable optimizations
APP_CXXFLAGS_NOOPT += /Od $(DBG_INFO_CXX)
APP_LDFLAGS_NOOPT += /OPT:NOREF $(DBG_INFO_LD)
TOOL_CXXFLAGS_NOOPT += /Od $(DBG_INFO_CXX)
TOOL_LDFLAGS_NOOPT += /OPT:NOREF $(DBG_INFO_LD)

## Pin program finalization:

# Add any additional flags that the user specified to the Pin command line.
PIN += $(PIN_TESTFLAGS) $(PINFLAGS)
